#!/usr/bin/python

"""
https://github.com/awhyang/3body-dynamic-wallpaper/
"""

import sys
import time
import random
from random import uniform as u
import subprocess as sp

from wand.image import Image
from wand.drawing import Drawing 
from wand.color import Color
from wand.display import display

class Vector3():
    def __init__(self, x, y, z):        
        self.x=x
        self.y=y
        self.z=z

    def __sub__(self, o):
        return(Vector3(self.x - o.x, self.y - o.y, self.z - o.z))

    def __add__(self, o):
        return(Vector3(self.x + o.x, self.y + o.y, self.z + o.z))

    def divide(self, val):
        return(Vector3(self.x / val, self.y / val, self.z / val))

    def multiply(self, val):
        return(Vector3(self.x * val, self.y * val, self.z * val))

    def round(self):
        return(Vector3(round(self.x, 1), round(self.y, 1), round(self.z, 1)))

    def ret(self):
        return(str(self.x) +' '+ str(self.y) +' '+ str(self.z))
       
    def magnitude(self):
        return((self.x**2 + self.y**2 + self.z**2) ** 0.5)

    def scale(self, factor):
        self.x =self.x * factor
        self.y = self.y * factor
        self.z = self.z * factor
        return(self)


class Body():
    def __init__(self, M, pos, V, id):
        self.M=M
        self.pos=pos     
        self.V=V
        self.id=id

    def getGF(self, o):
        f12,dist = getF(self, o)
        if f12 < 1e-9:
            return (Vector3(0,0,0), 0)
        else:
            f12v = (o.pos-self.pos)
            #print('===',f12,f12v.magnitude())
            f12v.scale(f12/f12v.magnitude())
            return(f12v, dist)

    def move(self, F, dt):
        dv = (F.divide(self.M)).multiply(dt)
        dpos = (dv.divide(2) + self.V).multiply(dt) 
        self.V = self.V + dv
        self.pos = self.pos + dpos

    def ret(self):
        return('pos='+self.pos.ret()+' v='+self.V.ret())


pos1 = Vector3(u(-100, 100), u(-100, 100), u(0, 100))
pos2 = Vector3(u(-100, 100), u(-100, 100), u(0, 100))
pos3 = Vector3(u(-100, 100), u(-100, 100), u(0, 100))

V1 = Vector3(u(-0.4, 0.4), u(-0.4, 0.4), u(-0.4, 0.4))
V2 = Vector3(u(-0.4, 0.4), u(-0.4, 0.4), u(-0.4, 0.4))
V3 = Vector3(u(-0.4, 0.4), u(-0.4, 0.4), u(-0.4, 0.4))


def init():
    pos1 = Vector3(u(-100, 100), u(-100, 100), u(0, 100))
    pos2 = Vector3(u(-100, 100), u(-100, 100), u(0, 100))
    pos3 = Vector3(u(-100, 100), u(-100, 100), u(0, 100))

    V1 = Vector3(u(-0.4, 0.4), u(-0.4, 0.4), u(-0.4, 0.4))
    V2 = Vector3(u(-0.4, 0.4), u(-0.4, 0.4), u(-0.4, 0.4))
    V3 = Vector3(u(-0.4, 0.4), u(-0.4, 0.4), u(-0.4, 0.4))


    bodyOne = Body(1*10**14, pos1, V1, 'white')
    bodyTwo = Body(1*10**14, pos2, V2, 'white')
    bodyThree = Body(1*10**14, pos3, V3, 'white')

    return([bodyOne, bodyTwo, bodyThree])


#pos1 = Vector3(0, 100, 50)
#pos2 = Vector3(100, 0 , 50)
#pos3 = Vector3(-20, 0, 100)

#cos_30 = 0.866

#pos1 = Vector3(-100, 0,  0)
#pos2 = Vector3( 0, 0, -100)
#pos3 = Vector3( 0, 50,  0)

#V1 = Vector3(0, 0, 0)
#V2 = Vector3(0, 0, 0)
#V3 = Vector3(0, 0, 0) 

#"""


bodyOne = Body(1*10**14, pos1, V1, 'white')
bodyTwo = Body(1*10**14, pos2, V2, 'white')
bodyThree = Body(1*10**14, pos3, V3, 'white')





def isContact(D12, D13, D23):
            if D12 < 10 and D13 < 10 and D23 <10:
                return(1)
            elif D12 < 10 and D23 < 10:
                return(2)
            elif D13 < 10 and D23 < 10:
                return(3) 
            elif D13 < 10 and D12 < 10:
                return(5)
            elif D13 < 10:
                return(6)
            elif D23 < 10:
                return(7)
            elif D12 < 10:
                return(8)

def dist(b1, b2): 
    return(( ((b1.pos.x-b2.pos.x)**2) + ((b1.pos.y-b2.pos.y)**2) + ((b1.pos.z-b2.pos.z)**2) )**0.5)


def getF(b1, b2):
    G = 6.673*10**-11
    distance=dist(b1, b2)

    #if distance<1:
    #    print('\nsmall:', distance)
    #    print(b1.pos.ret(), b2.pos.ret())
    return(0, distance) if distance<1E-3 else ((G*(b1.M*b2.M)/(distance**2)), distance)


def createImage(b1, b2, b3 ):
    with Drawing() as draw:        
        draw.stroke_width = 2
        draw.fill_color = Color('black')
        
        xprev, yprev, zprev='', '', ''

        bodies=[b1, b2, b3]

        for i in sorted(bodies, key=lambda x:round(x.pos.z, 1)):
            draw.stroke_color = Color(i.id)
            xpos = 960 + round(i.pos.x, 1)*3
            zpos = (xpos + (i.pos.z))*3 if i.pos.z > -100 else (xpos)*3
            ypos = 540 - round(i.pos.y, 1)*3
            
            k=True
            if xpos==xprev and ypos==yprev and zpos==zprev:
                k=False
                xprev=xpos
                yprev=ypos
                zprev=zpos
                break
            
            xprev=xpos
            yprev=ypos
            zprev=zpos

            if zpos < 5000:
                zpos = (xpos + ((i.pos.z+150)/10)) if i.pos.z > -200 else (xpos + 1) 
            else:
                zpos = xpos
            
            draw.circle((xpos, ypos), (zpos, ypos))
        
        if k == True:
            with Image(width=1920, height=1080, background=Color('black')) as image:
                image.save(draw(image), 'desktop.jpg')

def simulate(bodyOne, bodyTwo, bodyThree, dstep, sstep):
    while True:
        for i in range(int(dstep/sstep)):

            F12,D12 = bodyOne.getGF(bodyTwo)
            F13,D13 = bodyOne.getGF(bodyThree)
            F23,D23 = bodyTwo.getGF(bodyThree)


            F1 = F12 + F13
            F2 = Vector3(0,0,0) -F12 + F23
            F3 = Vector3(0,0,0) -F13 -F23

            min_dist = min(D12, D13, D23)
        
            dt=10**-7 if min_dist < 10**-3 else min_dist*sstep

            bodyOne.move(  F1, dt)
            bodyTwo.move(  F2, dt)
            bodyThree.move(F3, dt)    

        if (D12 > 1000 and D13 > 1000 and D23 > 1000):
            init()
            
            simulate(init()[0], init()[1], init()[2], 10**-3, 10**-6)

        createImage(bodyOne, bodyTwo, bodyThree)

        time.sleep(0.001)
        
        sp.Popen(['feh', '--bg-fill', 'desktop.jpg'])

        sys.stdout.write('\r'+'Body One: '+str(bodyOne.pos.round().ret())+'  Body Two: '+str(bodyTwo.pos.round().ret())+'  Body Three: '+str(bodyThree.pos.round().ret()) + ' Velocity: ' + str(round(bodyOne.V.magnitude(), 3)) +' '+ str(round(bodyTwo.V.magnitude(), 3)) +' '+ str(round(bodyTwo.V.magnitude(), 3)))
        


simulate(bodyOne, bodyTwo, bodyThree, 10**-3, 10**-6)



































#
